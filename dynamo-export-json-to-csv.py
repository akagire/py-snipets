# Generated by Claude 3.5 Sonnet 2024/09/26
# DynamoDB を s3 にエクスポートした結果を CSV に変換する時に作成

import json
import csv
import sys

def flatten_dynamodb_json(item):
    flattened = {}
    for key, value in item['Item'].items():
        # DynamoDBの型指定（S, N, BOOL等）を取り除く
        data_type = next(iter(value))
        flattened[key] = value[data_type]
    return flattened

def read_and_process_json(json_file):
    processed_data = []
    fieldnames = set()

    with open(json_file, 'r', encoding='utf-8') as jsonfile:
        for line_num, line in enumerate(jsonfile, 1):
            try:
                data = json.loads(line.strip())
                flattened_data = flatten_dynamodb_json(data)
                processed_data.append(flattened_data)
                fieldnames.update(flattened_data.keys())
            except json.JSONDecodeError:
                print(f"警告: 無効なJSONライン (行 {line_num}): {line}")
            except Exception as e:
                print(f"エラー処理中 (行 {line_num}): {e}")

    return processed_data, fieldnames

def write_csv(csv_file, processed_data, fieldnames):
    with open(csv_file, 'w', newline='', encoding='utf-8') as csvfile:
        csv_writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        csv_writer.writeheader()

        for row in processed_data:
            # 不足しているフィールドにはNoneを設定
            for field in fieldnames:
                if field not in row:
                    row[field] = None
            csv_writer.writerow(row)

def convert_dynamodb_export_to_csv(json_file, csv_file):
    processed_data, fieldnames = read_and_process_json(json_file)
    write_csv(csv_file, processed_data, fieldnames)

    print(f"変換が完了しました。CSVファイルは {csv_file} として保存されました。")
    print(f"検出されたフィールド: {', '.join(fieldnames)}")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("使用方法: python script.py <入力JSONファイル> <出力CSVファイル>")
        sys.exit(1)

    input_file = sys.argv[1]
    output_file = sys.argv[2]
    convert_dynamodb_export_to_csv(input_file, output_file)
